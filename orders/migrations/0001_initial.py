# Generated by Django 4.1.13 on 2023-12-28 17:11

import core.fields
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import djongo.models.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("games", "0001_initial"),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=255)),
                ("last_name", models.CharField(max_length=255)),
                (
                    "phone_number",
                    models.IntegerField(
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[0-9]{9}$", "Invalid phone number"
                            )
                        ]
                    ),
                ),
                ("street", models.CharField(max_length=255)),
                ("street_number", models.CharField(max_length=255)),
                (
                    "flat_number",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("city", models.CharField(max_length=255)),
                (
                    "post_code",
                    models.CharField(
                        max_length=6,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[0-9]{2}-[0-9]{3}$", "Invalid post code"
                            )
                        ],
                    ),
                ),
                ("state", models.CharField(max_length=255)),
                ("country", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="Item",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
                (
                    "game",
                    djongo.models.fields.ArrayReferenceField(
                        on_delete=djongo.models.fields.ArrayReferenceField._on_delete,
                        to="games.game",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("P", "Pending"),
                            ("S", "In Shipment"),
                            ("C", "Completed"),
                        ],
                        default="P",
                        max_length=1,
                    ),
                ),
                ("placed_at", models.DateTimeField(auto_now_add=True)),
                (
                    "total_price",
                    core.fields.Decimal128Field(decimal_places=2, max_digits=10),
                ),
                (
                    "items",
                    djongo.models.fields.ArrayReferenceField(
                        on_delete=djongo.models.fields.ArrayReferenceField._on_delete,
                        to="orders.item",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SupportTicket",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("issued_at", models.DateTimeField(auto_now_add=True)),
                ("content", models.TextField()),
                (
                    "order",
                    djongo.models.fields.ArrayReferenceField(
                        on_delete=djongo.models.fields.ArrayReferenceField._on_delete,
                        to="orders.order",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Cart",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "items",
                    djongo.models.fields.ArrayReferenceField(
                        on_delete=djongo.models.fields.ArrayReferenceField._on_delete,
                        to="orders.item",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                (
                    "address",
                    djongo.models.fields.ArrayReferenceField(
                        on_delete=djongo.models.fields.ArrayReferenceField._on_delete,
                        to="orders.address",
                    ),
                ),
                (
                    "favourites",
                    djongo.models.fields.ArrayReferenceField(
                        on_delete=djongo.models.fields.ArrayReferenceField._on_delete,
                        to="games.game",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "orders",
                    djongo.models.fields.ArrayReferenceField(
                        on_delete=djongo.models.fields.ArrayReferenceField._on_delete,
                        to="orders.order",
                    ),
                ),
                (
                    "shopping_cart",
                    djongo.models.fields.ArrayReferenceField(
                        on_delete=djongo.models.fields.ArrayReferenceField._on_delete,
                        to="orders.cart",
                    ),
                ),
                (
                    "support_tickets",
                    djongo.models.fields.ArrayReferenceField(
                        on_delete=djongo.models.fields.ArrayReferenceField._on_delete,
                        to="orders.supportticket",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
        ),
    ]
